from telebot import types
import telebot
import settings
import db
import logging
from datetime import datetime
import markups, messages

bot = telebot.TeleBot(settings.BOT_TOKEN)

@bot.message_handler(commands=['start'])

def send_welcome(message:types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text = 'Hello, I am finance manager helper. \n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥'
    )
    db.insert_user(message.from_user.username, message.from_user.id)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–ºüê±‚Äçüêâ
/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥üòú
/add_transaction - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é üòé
/show_transaction - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏üëç
/balance - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Åüòä
/delete - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID üåπ
/update - –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚ù§
/set_budget - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç ‚úî
/show_budgets - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—é–¥–∂–µ—Ç—ãüëÄ
/update_budget - –æ–±–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç üò¢
/info_user - –∏–Ω—Ñ–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µüéÅ
    """
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['info_user'])
def info_user(message:types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text = message.chat.first_name
    )

@bot.message_handler(commands=['add_transaction'])
def help_add(message:types.Message):
    am = bot.send_message(
        chat_id=message.chat.id,
        text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    )
    bot.register_next_step_handler(am, choose_category) 

def choose_category(message:types.Message):
    try:
        amount = float(message.text)
        am = bot.send_message(
            chat_id=message.chat.id,
            text='–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
            reply_markup=markups.create_category_keyboard(amount)
        )
    except Exception as error:
        logging.error(f'–ü–æ–∂–∞–ª—É—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã: {error}')
        am = bot.send_message(
            chat_id=message.chat.id,
            text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã '
        )
        bot.register_next_step_handler(am, choose_category)

@bot.callback_query_handler(func=lambda call:True)
def category_step_callback(call):
    data = call.data.split(':')
    category = data[0]
    amount = float(data[1])
    add_transaction(call.message, amount, category)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    video_URL = 'C:\\Users\\–ì–ª–µ–±\\Documents\\GitHub\\finance_manager\\media\\monkey.webm'
    bot.send_video(chat_id=call.message.chat.id, video=video_URL)

def add_transaction(message:types.Message, amount, category):
    try:
        months = {
            'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
            'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
            'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
            'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
        }
        now = datetime.now()
        month = months[now.strftime('%B')].capitalize() 
        date = now.strftime(f'%d {month} %Y, %H:%M')
        db.create_transactions(amount, category, date) 
        bot.send_message(message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞(‚òûÔæü„ÉÆÔæü)‚òû')
       
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {error}')
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')

@bot.message_handler(commands=['set_budget'])   
def set_budget_category(message:types.Message):
    am = bot.send_message(
        chat_id=message.chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—é–¥–∂–µ—Ç–∞ '
    )
    bot.register_next_step_handler(am, set_budget_amount)
    
def set_budget_amount(message:types.Message):
    category = message.text
    am = bot.send_message(
        chat_id = message.chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –±—é–¥–∂–µ—Ç–∞'
    )
    bot.register_next_step_handler(am, set_budget_final, category)

def set_budget_final(message:types.Message, category):
    try:
        amount = float(message.text)
        if amount < 0:
            am = bot.send_message(
                chat_id=message.chat.id,
                text=f'–í—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É: {amount} –±—é–¥–∂–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ '
            )
            bot.register_next_step_handler(am, set_budget_final, category)
        else:
            db.set_budgets(category, amount)
            bot.send_message(
                chat_id=message.chat.id,
                text=f'–ë—é–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω, —É –≤–∞—Å –µ—Å—Ç—å {amount} —Ä—É–±–ª–µ–π –Ω–∞ {category}'
            )
    except Exception as error:
        logging.error(f'–ë—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {error}')
        am = bot.send_message(
            chat_id=message.chat.id,
            text=f'–ù—É–∂–Ω—ã —á–∏—Å–ª–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç'
        )
        bot.register_next_step_handler(am, set_budget_final, category)
        
@bot.message_handler(commands=['show_transaction'])
def show_transaction(message:types.Message):
    transactions = db.get_transactions()
    if transactions:
        response = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: \n'
        for transaction in transactions:
            transaction = list(transaction)
            response += f'ID: {transaction[0]}, amount: {transaction[1]}, category: {transaction[2]}, date: {transaction[3]}\n'
        bot.send_message(
            chat_id = message.chat.id,
            text = response
        )
    else:
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–πüéÇ'
        )

@bot.message_handler(commands=['show_budgets'])
def show_budget(message:types.Message):
    budgets = db.get_budgets()
    if budgets:
        response = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—é–¥–∂–µ—Ç–æ–≤: \n'
        for budget in budgets:
            budget = list(budget)
            response +=f'ID: {budget[0]}, amount: {budget[1]}, category: {budget[2]}\n'
        bot.send_message(
            chat_id = message.chat.id,
            text = response
        )
    else:
        bot.send_message(
            chat_id = message.chat.id,
            text = '–ù–µ—Ç –±—é–¥–∂–µ—Ç–æ–≤üé∂'
        )

@bot.message_handler(commands = ['update_transactions'])
def update_transaction(message:types.Message):
    nixao = bot.send_message(
        chat_id = message.chat.id,
        text = f'–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    )
    bot.register_next_step_handler(nixao, update_transaction_step_1)

def update_transaction_step_1(message:types.Message):
    transaction_id = int(message.text)
    if db.check_id_trasaction(transaction_id):
        am = bot.send_message(
            chat_id = message.chat.id,
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É'
        )
        bot.register_next_step_handler(am, update_transaction_step_2, transaction_id)
    else:
        bot.send_message(
            chat_id = message.chat.id,
            text = '–ü–æ–¥ —Ç–∞–∫–∏–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ—Ç'
        )

def update_transaction_step_2(message:types.Message, transaction_id):
    try:
        transaction_amount = float(message.text)
        am = bot.send_message(
            chat_id = message.chat.id,
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
        )
        bot.register_next_step_handler(am, update_transaction_step_3, transaction_id, transaction_amount)
    except ValueError:
        am = bot.send_message(
            chat_id = message.chat.id,
            text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã'
        )
        bot.register_next_step_handler(am, update_transaction_step_2, transaction_id)

def update_transaction_step_3(message:types.Message, transaction_id, transaction_amount):
    transaction_category = message.text
    db.update_transactions(transaction_id, transaction_amount, transaction_category)
    bot.send_message(
    chat_id = message.chat.id,
    text = f'—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è id:{transaction_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    )

@bot.message_handler(commands = ['balance'])
def show_balance(message:types.Message):
    balance = db.general_balance()
    bot.send_message(
        chat_id = message.chat.id,
        text = f'–í–æ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å‚ú®: {balance} —Ä—É–±'
    )




    


        






# @bot.message_handler(func=lambda message: True)
# def Echo(message):
    # bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –Ω–µ—Ç—ÉüòÅ')















logging.basicConfig(level=logging.INFO)
if __name__ == '__main__':
    bot.polling()