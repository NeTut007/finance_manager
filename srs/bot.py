from telebot import types
import telebot
import settings
import db
import logging
from datetime import datetime
import markups

bot = telebot.TeleBot(settings.BOT_TOKEN_DENIS)

@bot.message_handler(commands=['start'])

def send_welcome(message:types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text = 'Hello, I am finance manager helper. \n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥'
    )
    db.insert_user(message.from_user.username, message.from_user.id)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–ºüê±‚Äçüêâ
/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥üòú
/add_transaction - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é üòé
/show_transaction - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏üëç
/delete_transaction - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID üåπ
/update_transaction - –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚ù§
/set_budget - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç ‚úî
/show_budgets - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—é–¥–∂–µ—Ç—ãüëÄ
/update_budget - –æ–±–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç üò¢
/info_user - –∏–Ω—Ñ–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µüéÅ
    """
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['info_user'])
def info_user(message:types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text = message.chat.first_name
    )

@bot.message_handler(commands=['add_transaction'])
def help_add(message:types.Message):
    am = bot.send_message(
        chat_id=message.chat.id,
        text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    )
    bot.register_next_step_handler(am, choose_category) 

def choose_category(message: types.Message):
    try:
        amount = float(message.text)
        msg = bot.send_message(
            chat_id=message.chat.id,
            text='–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:',
            reply_markup=markups.create_inline_category_keyboard(amount)
        )
        # process_custom_category(message,amount,)
    except Exception as error:
        logging.error(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã: {error}')
        msg = bot.send_message(
            chat_id=message.chat.id,
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã:'
        )
        bot.register_next_step_handler(msg, choose_category)

# def process_custom_category(message: types.Message, amount):
#     category = message.text.strip()
#     add_transaction(message, amount, category)

def add_transaction(message: types.Message, amount, category):
    try:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞
        months = {
            'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
            'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
            'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
            'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
        }
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()
        month = months[now.strftime('%B')].capitalize()
        date = now.strftime(f"%d {month} %Y, %H:%M")
        db.create_transaction(amount, category, date)
        bot.send_message(message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üòâ')
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {error}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_trans_'))
def category_step_callback(call:types.CallbackQuery):
    data = call.data.split(':')
    category = data[0].replace('add_trans_', '')
    amount = float(data[1])
    add_transaction(call.message, amount, category)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞
@bot.message_handler(commands=['set_budget'])   
def set_budget_category(message:types.Message):
    am = bot.send_message(
        chat_id=message.chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—é–¥–∂–µ—Ç–∞ '
    )
    bot.register_next_step_handler(am, set_budget_amount)
    
def set_budget_amount(message:types.Message):
    category = message.text
    am = bot.send_message(
        chat_id = message.chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –±—é–¥–∂–µ—Ç–∞'
    )
    bot.register_next_step_handler(am, set_budget_final, category)

def set_budget_final(message:types.Message, category):
    try:
        amount = float(message.text)
        if amount < 0:
            am = bot.send_message(
                chat_id=message.chat.id,
                text=f'–í—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É: {amount} –±—é–¥–∂–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ '
            )
            bot.register_next_step_handler(am, set_budget_final, category)
        else:
            db.set_budgets(category, amount)
            bot.send_message(
                chat_id=message.chat.id,
                text=f'–ë—é–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω, —É –≤–∞—Å –µ—Å—Ç—å {amount} —Ä—É–±–ª–µ–π –Ω–∞ {category}'
            )
    except Exception as error:
        logging.error(f'–ë—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {error}')
        am = bot.send_message(
            chat_id=message.chat.id,
            text=f'–ù—É–∂–Ω—ã —á–∏—Å–ª–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç'
        )
        bot.register_next_step_handler(am, set_budget_final, category)

@bot.message_handler(commands=['show_transaction'])
def show_transaction(message: types.Message):
    categories = db.get_all_categories()
    markup = markups.create_show_transactions_keyboard(categories)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_transaction') or call.data == 'show_all_transactions')
def handle_transaction_category_selection(call: types.CallbackQuery):
    if call.data == 'show_all_transactions':
        transactions = db.get_all_transactions()
    else:
        category = call.data.split('category_')[1]
        transactions = db.get_transactions_by_category(category)

    if transactions:
        transactions_text = "\n".join([f"{t[0]}: {t[1]} - {t[2]}" for t in transactions])
    else:
        transactions_text = "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=transactions_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@bot.message_handler(commands=['update_transaction'])
def request_transaction_id_for_update(message: types.Message):
    msg = bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, update_transaction_step1)

def update_transaction_step1(message: types.Message):
    transaction_id = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    if db.check_transaction_exists(transaction_id):
        msg = bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:")
        bot.register_next_step_handler(msg, update_transaction_step2, transaction_id)
    else:
        bot.send_message(chat_id=message.chat.id, text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def update_transaction_step2(message: types.Message, transaction_id):
    try:
        new_amount = float(message.text)
        msg = bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        bot.register_next_step_handler(msg, update_transaction_step3, transaction_id, new_amount)
    except ValueError:
        msg = bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã.")
        bot.register_next_step_handler(msg, update_transaction_step2, transaction_id)

def update_transaction_step3(message: types.Message, transaction_id, new_amount):
    new_category = message.text
    db.update_transaction(transaction_id, new_amount, new_category) 
    bot.send_message(chat_id=message.chat.id, text=f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID {transaction_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


# @bot.message_handler(func=lambda message: True)
# def Echo(message):
#     bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –Ω–µ—Ç—ÉüòÅ')

logging.basicConfig(level=logging.INFO)
if __name__ == '__main__':
    bot.polling()

